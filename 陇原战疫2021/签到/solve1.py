import gmpy2
from Crypto.Util.number import long_to_bytes,bytes_to_long
def egcd(a, b):
	if a == 0:
		return (b, 0, 1)
	else:
		g, y, x = egcd(b % a, a)
		return (g, x - (b // a) * y, y)

n=122031686138696619599914690767764286094562842112088225311503826014006886039069083192974599712685027825111684852235230039182216245029714786480541087105081895339251403738703369399551593882931896392500832061070414483233029067117410952499655482160104027730462740497347212752269589526267504100262707367020244613503
c1=39449016403735405892343507200740098477581039605979603484774347714381635211925585924812727991400278031892391996192354880233130336052873275920425836986816735715003772614138146640312241166362203750473990403841789871473337067450727600486330723461100602952736232306602481565348834811292749547240619400084712149673
c2=43941404835820273964142098782061043522125350280729366116311943171108689108114444447295511969090107129530187119024651382804933594308335681000311125969011096172605146903018110328309963467134604392943061014968838406604211996322468276744714063735786505249416708394394169324315945145477883438003569372460172268277

e1 = 65536
e2 = 270270
s = egcd(e1, e2)
print(s)
s1 = s[1]
s2 = s[2]
if s1<0:
	s1 = - s1
	c1 = gmpy2.invert(c1, n)
elif s2<0:
	s2 = - s2
	c2 = gmpy2.invert(c2, n)

m = pow(c1,s1,n)*pow(c2,s2,n) % n
# m=m.nth_root(2)
m=177865385585563514430577105148951340839798035808089323997658991656769403089679082112882868127755133
print(long_to_bytes(m))
# SETCTF{now_you_master_common_mode_attack}'