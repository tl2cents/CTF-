N = 64

class lfsr():
    def __init__(self, init, mask, length):
        self.init = init
        self.mask = mask
        self.lengthmask = 2**length-1

    def next(self):
        nextdata = (self.init << 1) & self.lengthmask 
        i = self.init & self.mask & self.lengthmask 
        output = 0
        while i != 0:
            output ^= (i & 1)
            i = i >> 1
        nextdata ^= output
        self.init = nextdata
        return output


def backtrace(state, mask):
    mask = ((mask & 0x7FFFFFFFFFFFFFFF) << 1) + 1
    i = state & mask
    output = 0
    while i != 0:
        output ^= (i & 1)
        i = i >> 1
    state >>= 1
    return (output << 63) + state



output
mask1=17638491756192425134
mask2=14623996511862197922
ans=[]


# 这里没有回溯的过程，减少穷举时间
for i in range(1984):
    gadget = int(output[i:i+64], 2)
    l1=lfsr(gadget,mask1,64)
    cnt=0    

    for j in range(i+64, 2048):
        if l1.next()==int(output[j]):
            cnt+=1
            
    total=1984-i
    # 输出为lfsr1概率
    ans.append((i, cnt / total))

ans.sort(key=lambda x:x[1], reverse=True)

ans2=[]
for i, each in ans:
    if each > 0.85:
        ans2.append((i,each))
    else:
        break
# 比例高于0.85的
ans2.sort(key=lambda x:x[0])
print(ans2)
idx = ans2[0][0]

# 从661到6669都是来自lfsr1的

init1 = output[idx:idx+64]
init1 = int(init1, 2)

# 回溯状态
for _ in range(idx):
    init1 = backtrace(init1, mask1)
# 得到初始值
for _ in range(64):
    init1 = backtrace(init1, mask1)

print(init1)

# 作者: Suers
# 链接: https://team-su.github.io/passages/2021-11-20-XHLJ/
# 来源: team-su.github.io
# 著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。
